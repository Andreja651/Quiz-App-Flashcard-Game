import { useState, useEffect } from "react";
import { useParams, useLocation } from "wouter";
import { useQuery, useMutation } from "@tanstack/react-query";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { X, Clock, TrendingUp, ArrowLeft, Timer, Settings } from "lucide-react";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import QuizQuestion from "@/components/quiz-question";
import { type Card as CardType, type QuizSession } from "@shared/schema";
import { QuizState, StudySettings } from "@/lib/types";

export default function StudyPage() {
  const params = useParams();
  const [, setLocation] = useLocation();
  const { toast } = useToast();
  const deckId = params.deckId ? parseInt(params.deckId) : null;

  const [quizState, setQuizState] = useState<QuizState>({
    sessionId: null,
    deckId: deckId,
    currentCardIndex: 0,
    cards: [],
    answers: {},
    score: 0,
    timeSpent: 0,
    startTime: Date.now(),
    isComplete: false,
  });

  const [studySettings, setStudySettings] = useState<StudySettings>({
    showExplanations: true,
    timedMode: false,
    shuffleQuestions: false,
    timeLimit: 30, // 30 seconds per question
    autoAdvance: false,
    playSound: false,
  });

  const [flaggedCards, setFlaggedCards] = useState<Set<number>>(new Set());
  const [cardStartTime, setCardStartTime] = useState<number>(Date.now());
  const [questionTimeLeft, setQuestionTimeLeft] = useState<number>(studySettings.timeLimit);

  // Fetch deck information
  const { data: deck, isLoading: deckLoading } = useQuery({
    queryKey: ["/api/decks", deckId],
    enabled: deckId !== null,
  });

  // Fetch cards for the deck
  const { data: cards = [], isLoading: cardsLoading } = useQuery<CardType[]>({
    queryKey: ["/api/decks", deckId, "cards"],
    enabled: deckId !== null,
  });

  // Initialize quiz session
  const createSessionMutation = useMutation({
    mutationFn: async (sessionData: any) => {
      const response = await apiRequest("POST", "/api/quiz-sessions", sessionData);
      return response.json();
    },
    onSuccess: (session: QuizSession) => {
      setQuizState(prev => ({
        ...prev,
        sessionId: session.id,
      }));
    },
  });

  // Submit card progress
  const submitProgressMutation = useMutation({
    mutationFn: async (progressData: any) => {
      const response = await apiRequest("POST", "/api/card-progress", progressData);
      return response.json();
    },
  });

  // Complete quiz session
  const completeSessionMutation = useMutation({
    mutationFn: async (sessionData: any) => {
      const response = await apiRequest("PUT", `/api/quiz-sessions/${quizState.sessionId}`, sessionData);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/decks"] });
      queryClient.invalidateQueries({ queryKey: ["/api/stats"] });
      setLocation("/progress");
    },
  });

  // Initialize quiz when cards are loaded
  useEffect(() => {
    if (cards.length > 0 && !quizState.sessionId) {
      const shuffledCards = studySettings.shuffleQuestions 
        ? [...cards].sort(() => Math.random() - 0.5)
        : cards;
      
      setQuizState(prev => ({
        ...prev,
        cards: shuffledCards,
      }));

      // Create quiz session
      createSessionMutation.mutate({
        deckId: deckId,
        totalQuestions: shuffledCards.length,
        score: 0,
        timeSpent: 0,
      });
    }
  }, [cards, studySettings.shuffleQuestions]);

  // Timer effect for overall quiz time
  useEffect(() => {
    const timer = setInterval(() => {
      setQuizState(prev => ({
        ...prev,
        timeSpent: Math.floor((Date.now() - prev.startTime) / 1000),
      }));
    }, 1000);

    return () => clearInterval(timer);
  }, []);

  // Timer effect for individual question time (timed mode)
  useEffect(() => {
    if (!studySettings.timedMode) return;

    setQuestionTimeLeft(studySettings.timeLimit);
    setCardStartTime(Date.now());

    const questionTimer = setInterval(() => {
      setQuestionTimeLeft(prev => {
        if (prev <= 1) {
          // Time's up - auto advance to next question
          if (studySettings.autoAdvance) {
            handleSkip();
          }
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(questionTimer);
  }, [quizState.currentCardIndex, studySettings.timedMode, studySettings.timeLimit]);

  // Reset question timer when card changes
  useEffect(() => {
    if (studySettings.timedMode) {
      setQuestionTimeLeft(studySettings.timeLimit);
      setCardStartTime(Date.now());
    }
  }, [quizState.currentCardIndex]);

  const handleAnswer = (answer: string) => {
    const currentCard = quizState.cards[quizState.currentCardIndex];
    const isCorrect = answer.toLowerCase() === currentCard.answer.toLowerCase();
    const actualTimeSpent = Math.floor((Date.now() - cardStartTime) / 1000);
    
    setQuizState(prev => ({
      ...prev,
      answers: {
        ...prev.answers,
        [currentCard.id]: answer,
      },
      score: isCorrect ? prev.score + 1 : prev.score,
    }));

    // Submit progress for current card
    if (quizState.sessionId) {
      submitProgressMutation.mutate({
        cardId: currentCard.id,
        sessionId: quizState.sessionId,
        isCorrect,
        timeSpent: actualTimeSpent,
      });
    }
  };

  const handleNext = () => {
    if (quizState.currentCardIndex < quizState.cards.length - 1) {
      setQuizState(prev => ({
        ...prev,
        currentCardIndex: prev.currentCardIndex + 1,
      }));
    } else {
      completeQuiz();
    }
  };

  const handlePrevious = () => {
    if (quizState.currentCardIndex > 0) {
      setQuizState(prev => ({
        ...prev,
        currentCardIndex: prev.currentCardIndex - 1,
      }));
    }
  };

  const handleSkip = () => {
    handleNext();
  };

  const handleFlag = () => {
    const currentCard = quizState.cards[quizState.currentCardIndex];
    setFlaggedCards(prev => {
      const newSet = new Set(prev);
      if (newSet.has(currentCard.id)) {
        newSet.delete(currentCard.id);
      } else {
        newSet.add(currentCard.id);
      }
      return newSet;
    });
  };

  const completeQuiz = () => {
    if (quizState.sessionId) {
      completeSessionMutation.mutate({
        score: quizState.score,
        timeSpent: quizState.timeSpent,
        completedAt: new Date(),
      });
    }
  };

  const handleExitQuiz = () => {
    if (confirm("Are you sure you want to exit the quiz? Your progress will be lost.")) {
      setLocation("/");
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  if (deckLoading || cardsLoading) {
    return (
      <div className="flex items-center justify-center min-h-96">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!deck || !cards.length) {
    return (
      <div className="max-w-4xl mx-auto">
        <Card className="text-center py-12">
          <CardContent>
            <div className="flex flex-col items-center space-y-4">
              <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center">
                <X className="h-8 w-8 text-gray-400" />
              </div>
              <div>
                <h3 className="text-lg font-medium text-gray-900">Deck not found or empty</h3>
                <p className="text-gray-600">This deck doesn't exist or has no cards to study.</p>
              </div>
              <Button onClick={() => setLocation("/")} className="mt-4">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Dashboard
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (quizState.cards.length === 0) {
    return (
      <div className="flex items-center justify-center min-h-96">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  const currentCard = quizState.cards[quizState.currentCardIndex];
  const progress = ((quizState.currentCardIndex + 1) / quizState.cards.length) * 100;
  const currentScore = quizState.cards.length > 0 ? Math.round((quizState.score / Math.max(quizState.currentCardIndex, 1)) * 100) : 0;

  return (
    <div className="max-w-4xl mx-auto">
      {/* Quiz Header */}
      <Card className="shadow-sm border border-gray-200 mb-6">
        <CardContent className="p-6">
          <div className="flex justify-between items-center mb-4">
            <div>
              <h2 className="text-2xl font-bold text-gray-900">{deck.title}</h2>
              <p className="text-gray-600">{deck.description}</p>
            </div>
            <Button
              onClick={handleExitQuiz}
              variant="ghost"
              size="sm"
              className="text-gray-400 hover:text-gray-600"
            >
              <X className="h-5 w-5" />
            </Button>
          </div>
          
          <div className="flex items-center space-x-6">
            <div className="flex items-center space-x-2 flex-1">
              <span className="text-sm font-medium text-gray-700">Progress:</span>
              <Progress value={progress} className="w-32" />
              <span className="text-sm text-gray-600">
                {quizState.currentCardIndex + 1}/{quizState.cards.length}
              </span>
            </div>
            <div className="flex items-center space-x-2">
              <Clock className="h-4 w-4 text-gray-400" />
              <span className="text-sm text-gray-600">{formatTime(quizState.timeSpent)}</span>
            </div>
            {studySettings.timedMode && (
              <div className="flex items-center space-x-2">
                <Timer className={`h-4 w-4 ${questionTimeLeft <= 5 ? 'text-red-500' : 'text-orange-400'}`} />
                <span className={`text-sm font-medium ${questionTimeLeft <= 5 ? 'text-red-600' : 'text-orange-600'}`}>
                  {questionTimeLeft}s
                </span>
              </div>
            )}
            <div className="flex items-center space-x-2">
              <TrendingUp className="h-4 w-4 text-gray-400" />
              <span className="text-sm text-gray-600">Score: {currentScore}%</span>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Quiz Question */}
      <div className="mb-6">
        <QuizQuestion
          card={currentCard}
          questionNumber={quizState.currentCardIndex + 1}
          totalQuestions={quizState.cards.length}
          onAnswer={handleAnswer}
          onNext={handleNext}
          onPrevious={handlePrevious}
          onSkip={handleSkip}
          onFlag={handleFlag}
          canGoNext={true}
          canGoPrevious={quizState.currentCardIndex > 0}
        />
      </div>

      {/* Study Mode Settings */}
      <Card className="shadow-sm border border-gray-200">
        <CardContent className="p-6">
          <div className="flex items-center mb-4">
            <Settings className="h-5 w-5 text-gray-600 mr-2" />
            <div>
              <h4 className="text-lg font-semibold text-gray-900">Study Mode Options</h4>
              <p className="text-sm text-gray-600">Customize your learning experience</p>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* Basic Settings */}
            <div className="space-y-4">
              <h5 className="font-medium text-gray-900">Display</h5>
              <div className="flex items-center space-x-2">
                <Checkbox 
                  id="explanations"
                  checked={studySettings.showExplanations}
                  onCheckedChange={(checked) => 
                    setStudySettings(prev => ({ ...prev, showExplanations: checked as boolean }))
                  }
                />
                <Label htmlFor="explanations" className="text-sm text-gray-700">
                  Show explanations
                </Label>
              </div>
              <div className="flex items-center space-x-2">
                <Checkbox 
                  id="shuffle"
                  checked={studySettings.shuffleQuestions}
                  onCheckedChange={(checked) => 
                    setStudySettings(prev => ({ ...prev, shuffleQuestions: checked as boolean }))
                  }
                />
                <Label htmlFor="shuffle" className="text-sm text-gray-700">
                  Shuffle questions
                </Label>
              </div>
            </div>

            {/* Timer Settings */}
            <div className="space-y-4">
              <h5 className="font-medium text-gray-900">Timer</h5>
              <div className="flex items-center space-x-2">
                <Checkbox 
                  id="timed"
                  checked={studySettings.timedMode}
                  onCheckedChange={(checked) => 
                    setStudySettings(prev => ({ ...prev, timedMode: checked as boolean }))
                  }
                />
                <Label htmlFor="timed" className="text-sm text-gray-700">
                  Enable timed mode
                </Label>
              </div>
              {studySettings.timedMode && (
                <div className="space-y-2">
                  <Label htmlFor="timeLimit" className="text-sm text-gray-700">
                    Time per question (seconds)
                  </Label>
                  <Input
                    id="timeLimit"
                    type="number"
                    min="5"
                    max="120"
                    value={studySettings.timeLimit}
                    onChange={(e) => 
                      setStudySettings(prev => ({ 
                        ...prev, 
                        timeLimit: parseInt(e.target.value) || 30 
                      }))
                    }
                    className="w-20"
                  />
                </div>
              )}
            </div>

            {/* Advanced Settings */}
            <div className="space-y-4">
              <h5 className="font-medium text-gray-900">Automation</h5>
              <div className="flex items-center space-x-2">
                <Checkbox 
                  id="autoAdvance"
                  checked={studySettings.autoAdvance}
                  onCheckedChange={(checked) => 
                    setStudySettings(prev => ({ ...prev, autoAdvance: checked as boolean }))
                  }
                  disabled={!studySettings.timedMode}
                />
                <Label htmlFor="autoAdvance" className="text-sm text-gray-700">
                  Auto-advance when time runs out
                </Label>
              </div>
              <div className="flex items-center space-x-2">
                <Checkbox 
                  id="playSound"
                  checked={studySettings.playSound}
                  onCheckedChange={(checked) => 
                    setStudySettings(prev => ({ ...prev, playSound: checked as boolean }))
                  }
                />
                <Label htmlFor="playSound" className="text-sm text-gray-700">
                  Play sound effects
                </Label>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
